<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>3D модель с анимированными точками</title>
  <style>
    body { margin: 0; overflow: hidden; }
    canvas { display: block; }

    #popup {
      display: none;
      position: fixed;
      top: 10%;
      left: 50%;
      transform: translateX(-50%);
      background: white;
      padding: 10px;
      border: 2px solid black;
      z-index: 10;
    }
    #popup img {
      max-width: 80vw;
      max-height: 80vh;
    }
    #popup button {
      display: block;
      margin: 10px auto 0 auto;
    }

    #tooltip {
      position: absolute;
      padding: 5px 10px;
      background: rgba(0,0,0,0.7);
      color: white;
      border-radius: 5px;
      pointer-events: none;
      font-size: 14px;
      display: none;
      z-index: 5;
    }
  </style>
</head>
<body>

<div id="popup">
  <img id="popup-image" src="" alt="Деталь">
  <button onclick="document.getElementById('popup').style.display='none'">Закрыть</button>
</div>

<div id="tooltip"></div>

<script src="https://cdn.jsdelivr.net/npm/three@0.161.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.161.0/examples/js/controls/OrbitControls.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.161.0/examples/js/loaders/GLTFLoader.js"></script>

<script>
  let scene, camera, renderer, controls;
  let raycaster = new THREE.Raycaster();
  let mouse = new THREE.Vector2();
  let clickablePoints = [];
  let INTERSECTED;

  init();
  animate();

  function init() {
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0xdddddd);

    camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    camera.position.set(0, 1, 3);

    renderer = new THREE.WebGLRenderer({antialias: true});
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;

    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(2, 2, 5);
    scene.add(light);

    const loader = new THREE.GLTFLoader();
    loader.load('models/model.glb', function(gltf) {
      scene.add(gltf.scene);

      // Добавляем несколько анимированных точек
      addInteractivePoint(new THREE.Vector3(0, 1.5, 0), 'images/detail1.jpg', 'Верх памятника');
      addInteractivePoint(new THREE.Vector3(0.5, 1.0, 0.5), 'images/detail2.jpg', 'Левая сторона');
      addInteractivePoint(new THREE.Vector3(-0.5, 0.8, -0.5), 'images/detail3.jpg', 'Правая сторона');
      
    }, undefined, function(error) {
      console.error(error);
    });

    window.addEventListener('resize', onWindowResize, false);
    window.addEventListener('click', onClick, false);
    window.addEventListener('mousemove', onMouseMove, false);
  }

  function addInteractivePoint(position, imageUrl, tooltipText) {
    const texture = new THREE.TextureLoader().load('https://threejs.org/examples/textures/sprites/disc.png'); // красивый кружок
    const spriteMaterial = new THREE.SpriteMaterial({ map: texture, color: 0xff0000 });
    const sprite = new THREE.Sprite(spriteMaterial);
    sprite.position.copy(position);
    sprite.scale.set(0.2, 0.2, 0.2);
    sprite.userData.imageUrl = imageUrl;
    sprite.userData.tooltip = tooltipText;
    sprite.userData.baseScale = 0.2;
    scene.add(sprite);
    clickablePoints.push(sprite);
  }

  function onClick(event) {
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

    raycaster.setFromCamera(mouse, camera);
    const intersects = raycaster.intersectObjects(clickablePoints);

    if (intersects.length > 0) {
      const clickedPoint = intersects[0].object;
      const imgSrc = clickedPoint.userData.imageUrl;
      const popup = document.getElementById('popup');
      const popupImage = document.getElementById('popup-image');
      popupImage.src = imgSrc;
      popup.style.display = 'block';
    }
  }

  function onMouseMove(event) {
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

    raycaster.setFromCamera(mouse, camera);
    const intersects = raycaster.intersectObjects(clickablePoints);

    const tooltip = document.getElementById('tooltip');

    if (intersects.length > 0) {
      if (INTERSECTED != intersects[0].object) {
        INTERSECTED = intersects[0].object;
        tooltip.style.display = 'block';
        tooltip.innerHTML = INTERSECTED.userData.tooltip;
      }
      tooltip.style.left = event.clientX + 10 + 'px';
      tooltip.style.top = event.clientY + 10 + 'px';
    } else {
      INTERSECTED = null;
      tooltip.style.display = 'none';
    }
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  function animate() {
    requestAnimationFrame(animate);

    // Пульсация всех точек
    clickablePoints.forEach(sprite => {
      const scale = sprite.userData.baseScale + Math.sin(Date.now() * 0.005) * 0.01;
      sprite.scale.set(scale, scale, scale);
    });

    controls.update();
    renderer.render(scene, camera);
  }
</script>

</body>
</html>
